name: OpenSearch/Elasticsearch Settings
before: |
  <p>
    Arkime uses OpenSearch/Elasticsearch both as a database and as time based storage for all the sessions saved.
    These settings have to do with how Arkime talks to OpenSearch/Elasticsearch.
    While the terms elasticsearch and es are used in the variables, both OpenSearch and Elasticsearch are supported for most settings.
  </p>

settings:
  - key: elasticsearch
    value: http://localhost:9200
    text: |
      A comma separated list of urls to use to connect to the OpenSearch/Elasticsearch cluster.
      If OpenSearch/Elasticsearch requires a user/password those can be placed in the url also, http://user:pass@hostname:port or use <a href="#elasticsearchBasicAuth">elasticsearchBasicAuth</a>
      While not required, if not using a load balancer, a different OpenSearch/Elasticsearch node can be specified for each Arkime capture node.

  - key: elasticsearchTimeout
    value: 300
    text: |
      Approximate timeout for most requests to OpenSearch/Elasticsearch.
      OpenSearch/Elasticsearch will automatically cancel any request after this expires.

  - key: esAdminUsers
    value: EMPTY
    text: |
      A comma separated list of users that are allowed to use the ES Admin stats tab.
      This tab allows the user to change several of the ES settings from the UI.

  - key: esClientCert
    value: EMPTY
    text: |
      (Since 2.0) The public key file to use for tls client authentication with OpenSearch/Elasticsearch.  Must also set esClientKey.

  - key: esClientKey
    value: EMPTY
    text: |
      (Since 2.0) The private key file to use for tls client authentication with OpenSearch/Elasticsearch.  Must also set esClientCert.

  - key: esClientKeyPass
    value: EMPTY
    text: |
      (Since 2.0) The password for the esClientKey setting.

  - key: elasticsearchAPIKey
    value: EMPTY
    text: |
      (Since 3.0.0) Use an Elasticsearch API key for access without
      requiring basic authentication. Once you have created an API Key,
      you must base64 encode the id and api_key joined by a colon.
      <code>echo -n "id:api_key" | base64</code> is one way to generate
      the base64 key. Notice the -n, you have to make sure you don't
      encode an extra newline.

  - key: usersElasticsearchAPIKey
    value: EMPTY
    text: |
      (Since 3.0.0) Use an Elasticsearch API key for users DB access without
      requiring basic authentication. See
      <a href="#elasticsearchAPIKey">elasticsearchAPIKey setting</a> for information
      on creating and encoding an Elasticsearch API Key.
      See <a href="#userselasticsearch">usersElasticsearch setting</a>
      for information about the Users DB.

  - key: elasticsearchBasicAuth
    value: EMPTY
    text: |
      (Since 3.1.0) Use basic auth with OpenSearch/Elasticsearch.
      The value can either be the plain text "user:pass" or the base64 encoded version.
      One way to generate base64 <code>echo -n "username:password" | base64</code> version.
      Notice the -n, you have to make sure you don't encode an extra newline.
      All Arkime versions also support http://user:pass@hostname:port in the elasticsearch setting.

  - key: usersElasticsearchBasicAuth
    value: EMPTY
    text: |
      (Since 3.1.0) Use basic auth with OpenSearch/Elasticsearch for Users DB.
      See <a href="#elasticsearchBasicAuth">elasticsearchBasicAuth setting</a> for information
      on creating and encoding an OpenSearch/Elasticsearch Basic Auth.
      See <a href="#userselasticsearch">usersElasticsearch setting</a>
      for information about the Users DB.
      All Arkime versions also support http://user:pass@hostname:port in the usersElasticsearch setting.

  - key: prefix
    value: EMPTY
    text: |
      It is possible for multiple Arkime clusters to use the same OpenSearch/Elasticsearch cluster by 
      giving each Arkime cluster a different prefix value. The prefix value will be used in all
      index names that Arkime creates.

  - key: usersPrefix
    value: '[PREFIX] if <a href="#prefix">prefix</a> set otherwise EMPTY'
    text: | 
      Like prefix but only for the users information if <a href=#usersElasticsearch>usersElasticsearch</a> set.

  - key: usersElasticsearch
    value: EMPTY
    text: |
      Set this option to a shared OpenSearch/Elasticsearch cluster to use for the users index.
      This allows multiple Arkime clusters to share the same users index, so that the same accounts and settings work across all Arkime clusters.
      The <a href="#elasticsearch">elasticsearch</a> setting should use a unique OpenSearch/Elasticsearch cluster per Arkime cluster and the usersElasticsearch setting should use a single shared OpenSearch/Elasticsearch cluster.
      <br>
      A comma separated list of urls to use to connect to the users OpenSearch/Elasticsearch cluster is supported.
      If OpenSearch/Elasticsearch requires a user/password those can be placed in the url also, http://user:pass@hostname:port or use <a href="#usersElasticsearchBasicAuth">usersElasticsearchBasicAuth</a>
      <br>
      (Since 3.0) This setting applys to shortcuts too! Shortcuts will be saved in the usersElasticsearch.
      <strong>Note:</strong> <a href="#cronqueries">cronQueries</a> also has to be set in order for shortcuts to be saved to the usersElasticsearch and synced to each cluster.

  - key: rotateIndex
    value: daily
    text: |
      Specifies how often to create a new index in OpenSearch/Elasticsearch. Use
      daily or a form of hourly for busy live instances, use weekly or
      monthly for research instances. When choosing a value, the goal
      is to have the avg shard be between 50G - 150G. Prior to 1.5.0 changing
      the value will cause previous sessions to be unreachable through
      the interface, since 1.5.0 you can set queryAllIndices if you
      need to change the value. Prior to 1.5.0 if using the multi
      viewer then all Arkime clusters must have the same value.
      <br>
      Possible values are: hourly, daily, weekly,
      monthly.
      <br>
      1.5.0 added hourly2, hourly3, hourly4,
      hourly6, hourly8, hourly12 which will bucket
      N number of hours together. So hourly3 for example will
      make it so each shard has 3 hours of data. hourly1 would
      be the same as hourly and hourly24 would be the
      same as daily.

  - key: maxESConns
    value: "20"
    text: |
      Max number of connections to OpenSearch/Elasticsearch from capture process

  - key: maxESRequests
    value: "500"
    text: |
      Max number of OpenSearch/Elasticsearch requests outstanding in queue

  - key: autoGenerateId
    value: "false"
    text: |
      (Since 1.6) Use OpenSearch/Elasticsearch auto generated ids

  - key: compressES
    value: "false"
    text: |
      Compress requests to ES, reduces ES bandwidth by ~80% at the cost
      of increased CPU. MUST have "http.compression: true" in
      elasticsearch.yml file

  - key: dbBulkSize
    value: "20000"
    text: |
      Size of indexing request to send to OpenSearch/Elasticsearch. Increase if
      monitoring a high bandwidth network.

  - key: dbEsHealthCheck
    value: "true"
    text: |
      Perform an OpenSearch/Elasticsearch health check every 30 seconds and report on slowness or if not green.  For big clusters this should be disabled.

  - key: dbFlushTimeout
    value: "5"
    text: |
      Number of seconds before we force a flush to OpenSearch/Elasticsearch
