name: Multi Viewer Settings
before: |
  <p>
    The multi viewer is useful when you have multiple Arkime clusters that you want to search across.
    To use the multi viewer, an extra viewer process and a multies process must be started.
    The viewer process works like a normal viewer process, except instead of talking to a OpenSearch/Elasticsearch server, it talks to a multies server.
    The multies server proxies the queries to all the real OpenSearch/Elasticsearch servers.
    These two processes can share the same config file and node name section.
    The viewer part uses the SAME configuration values as above if you need to set anything.
  </p>

after: |
  <p class="mb-0">
    A sample configuration for multi viewer (the elasticsearch variable points to the multies.js process):
  </p>
  <pre><code>[multi-viewer]
  elasticsearch=127.0.0.1:8200
  viewPort = 8009
  #viewHost = localhost
  multiES = true
  multiESPort = 8200
  multiESHost = localhost
  multiESNodes = http://escluster1.example.com:9200,name:escluster1,prefix:PREFIX,elasticsearchAPIKey:testkey1;http://escluster2.example.com:9200,name:escluster2</code></pre>
  <p class="mb-0">
    Which you would then use by starting both the multiviewer and multies.
    This is a sample for running manually (but you should setup startup
    scripts to run for real):
  </p>
  <pre><code>cd /opt/arkime/viewer
  /opt/arkime/bin/node multies.js -n multi-viewer
  /opt/arkime/bin/node viewer.js -n multi-viewer</code></pre>

settings:
  - key: multiES
    value: false
    text: This is the multiES node

  - key: multiESPort
    value: 8200
    text: Port that multies.js should listen on

  - key: multiESHost
    value: EMPTY
    text: Host interface that multies.js should listen on

  - key: multiESNodes
    value: EMPTY
    text: |
      Semicolon separated list of OpenSearch/Elasticsearch nodes that MultiES should connect to.
      The first node listed will be considered the primary node and is used for users/views/queries.
      <br>
      Example: <code>http://escluster1.example.com:9200,name:escluster1,prefix:PREFIX,elasticsearchAPIKey:testkey1;http://escluster2.example.com:9200,name:escluster2</code>
      <br>
      Components (comma separated):
      <ul>
        <li>
          (required) the first part is the node <code>http[s]://[user:password@]host:port</code>.
          If using 3.1 or later it is suggested to use elasticsearchBasicAuth or elasticsearchAPIKey is the user/pass isn't logged.
        </li>
        <li>
          (required since 2.7.0) <code>name:</code> element to name the OpenSearch/Elasticsearch node.
        </li>
        <li>
           (required) <code>prefix:</code> element can follow each host
           if that cluster was setup with an OpenSearch/Elasticsearch prefix.
           For 3.x or later it should be prefix:arkime if you didn't set a prefix.
        </li>
        <li>
          (optional since 3.1.0) <code>elasticsearchAPIKey:</code> element
          to set an Elasticsearch API Key per node.
          <a href="#elasticsearchAPIKey">See elasticsearchAPIKey settings</a>
          for more information on how to configure ES API Keys.
        </li>
        <li>
          (optional since 3.1.0) <code>elasticsearchBasicAuth:</code> element
          to set an OpenSearch/Elasticsearch Basic Auth per node.
          <a href="#elasticsearchBasicAuth">See elasticsearchBasicAuth settings</a>
          for more information on how to encode Basic Auth settings, you MUST use the base64 version with multies.
        </li>
      </ul>

  - key: certFile
    value: EMPTY
    text: Public certificate to use for https, if not set then http will be used. keyFile must also be set.

  - key: keyFile
    value: EMPTY
    text: Private certificate to use for https, if not set then http will be used. certFile must also be set.
