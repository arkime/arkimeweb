name: File
before: |
  <p>
    The wiseService can monitor multiple files. Each file needs to have its own section, with the section name starting with `file:`. The wiseService automatically notices if the file changes and reloads it.
    <br>
    Create a <code>[file:UNIQUENAME]</code> section to configure
  </p>

settings:
  - key: file
    value: REQUIRED
    text: The file to load

  - key: tags
    value: REQUIRED
    text: Comma separated list of tags to set for matches

  - key: type
    value: REQUIRED
    text: The type of data in the file, such as ip,domain,md5,ja3,email, or something defined in `[wise-types]`

  - key: format
    value: csv
    text: csv,[Tagger Format](taggerformat),json,jsonl - The format of data file

  - key: keyColumn
    value: 0
    text: For json formatted files, which json field is the key

  - key: column
    value: 0
    text: For csv formatted files, which column is the data

after: |
  <h4>CSV Example</h4>
  <p>Config File</p>
  <pre>
    [file:ipcsv]
    file=./ip.wise.csv
    tags=ipwisecsv
    type=ip
    column=1
    format=csv
    #Asset field already exist, use field 0 for value. extra field is new, use field 2 for value
    fields=field:asset;shortcut:0\nfield:extra;kind:lotermfield;count:true;friendly:extra;db:extra;help:Help for Extra;shortcut:2
  </pre>
  <p>The CSV File</p>
  <pre>
    blah1,10.0.0.3
    blah2,10.0.0.2,foo
  </pre>

  <h4>Tagger Example</h4>
  <p>Config File</p>
  <pre>
    [file:iptagger]
    file=./ip.wise.tagger
    tags=ipwisetagger
    type=ip
    format=tagger
  </pre>
  <p>The Tagger File</p>
  <pre>
    #field:extra;kind:lotermfield;count:true;friendly:extra;db:extra;help:Help for Extra
    10.0.0.3;asset=blah1
    10.0.0.2;asset=blah2;extra=foo
  </pre>

  <h4>JSON Example</h4>
  <p>Config File</p>
  <pre>
    [file:ipcsv]
    file=./ip.wise.json
    tags=ipwisejson
    type=ip
    keyColumn=theip
    format=json
    #Asset field already exist, use field asset for value. extra field is new, use field extra for value
    fields=field:asset;shortcut:asset\nfield:extra;kind:lotermfield;count:true;friendly:extra;db:extra;help:Help for Extra;shortcut:extra\n
  </pre>
  <p>The JSON File</p>
  <pre>
    [{"asset": "blah", "theip": "10.0.0.3"},
     {"asset": "blah2", "theip": "10.0.0.2", "extra": "foo"}]
  </pre>
  <p>**Note:** you use shortcut to match between fields in the JSON dictionary and the properties in OpenSearch/Elasticsearch.</p>

  <h4>JSONL Example</h4>
  <p>Added in 5.0, WISE now supports jsonl files with one full json object per line.</p>
  <p>Config File</p>
  <pre>
    [file:ipcsv]
    file=./ip.wise.jsonl
    tags=ipwisejsonl
    type=ip
    keyColumn=theip
    format=jsonl
    #Asset field already exist, use field asset for value. extra field is new, use field extra for value
    fields=field:asset;shortcut:asset\nfield:extra;kind:lotermfield;count:true;friendly:extra;db:extra;help:Help for Extra;shortcut:extra\n
  </pre>
  <p>The JSON File</p>
  <pre>
    {"asset": "blah", "theip": "10.0.0.3"}
    {"asset": "blah2", "theip": "10.0.0.2", "extra": "foo"}
  </pre>
  <p>**Note:** you use shortcut to match between fields in the JSONL dictionary and the properties in OpenSearch/Elasticsearch.</p>

  <h4>Subnets Example</h4>
  <p>More complex example of the above where you want to create a new section</p>
  <pre>
    [file:subnets]
    type=ip
    format=json
    file=subnets.json
    keyColumn=ip
    fields=field:subnets.description;kind:termfield;count:true;friendly:Description;db:subnets.description;help:Description;shortcut:description\nfield:subnets.securityzone;kind:termfield;count:true;friendly:Security Zone;db:subnets.securityzone;help:Security Zone;shortcut:securityZone\nfield:subnets.vlan;kind:integer;count:true;friendly:Vlan;db:subnets.vlan;help:Vlan;shortcut:vlan\nfield:subnets.site;kind:termfield;count:true;friendly:Site;db:subnets.site;help:Site;shortcut:site
    # Jade view method
    view=if (session.subnets)\n    +arrayList(session.subnets, 'description', 'Description', 'subnets.description')\n    +arrayList(session.subnets, 'label', 'Label', 'subnets.label')\n    +arrayList(session.subnets, 'securityzone', 'Security Zone', 'subnets.securityzone')\n    +arrayList(session.subnets, 'vlan', 'Vlan', 'subnets.vlan')\n    +arrayList(session.subnets, 'site', 'Site', 'subnets.site')
    # Simple view method
    #view=require:subnets;title:Subnets;fields:subnets.description,subnets.label,subnets:securityzone,subnets.vlan,subnets.site
  </pre>
  <p>The JSON File</p>
  <pre>
    [{"description": "the description", "label": "interesting label", "securityzone": "hot", "vlan": 123, "site": "secret",  "ip": "10.0.0.3"},
     {"description": "the description2", "label": "interesting label2", "securityzone": "cold", "vlan": 123, "site": "secret",  "ip": "10.0.0.2"}]
  </pre>
