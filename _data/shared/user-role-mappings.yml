name: user-role-mappings
before: |
  <p>
    Starting with 5.5.0 it is now possible to dynamically update the roles associated with a user when using header or oidc authMode.
    This is done by adding a <code>[user-role-mappings]</code> section to the configuration file.
    When using the user-role-mappings section, all roles you are using must be defined, one per line, and any role no longer enabled for the user will be removed.
    The rules are evaluated on login, and the user's roles are updated accordingly.
  </p>
  <p class="alert alert-secondary">
    <span class="fa fa-exclamation-triangle">
    </span>
    To ensure immediate role changes, manually edit the user's roles on the Users tab, as automated updates require a user login.
  </p>
  <p>
    Each line is of the format <code>rolename=javascript expression</code>.
    The javascript expression can use two variable, <code>this</code> which allows you to reference any Arkime DB user fields and <code>vals</code> which allows you to access any of the request headers for header auth or the oidc info for oidc auth.
  </p>
  <p>
    Depending on what IAM system you are using, you may need to enable the sending of userinfo to Arkime.
  </p>
  <p>
    For user defined roles you must use the format <code>role:a-user-defined-role</code> and have created the role <code>a-user-defined-role</code> in the Users page UI.
    The leading <code>role:</code> is required to distinguish it from the built-in roles.
    Using user defined roles is broken before 5.7.0, so please upgrade to take advantage of this feature.
  </p>
  <p>
    <strong>Important:</strong>
    <ul>
      <li>Nodejs lowercases all HTTP header names, since HTTP headers are case insensitive. You should use lowercase keys in your javascript expressions. For example <code>vals['x-roles']</code> NOT <code>vals['X-Roles']</code>.</li>
      <li>Javascript keys can't contain dashes, so you must put them in quotes. For example <code>vals['x-roles']</code> NOT <code>vals.x-roles</code>.</li>
      <li>A role that isn't defined will be removed from the user.</li>
    </ul>
  </p>



after: |
  <p>
    Example:
  </p>
  <pre><code>[user-role-mappings]
  # Everyone is arkimeUser
  arkimeUser=true
  # usersAdmin have -svc extension in userId
  usersAdmin=this.userId.endsWith('-svc')
  # fred and wilma are superAdmin
  superAdmin=this.userId === 'fred' || this.userId === 'wilma'
  # custom role based on header 'roles' containing the string 'special' anywhere
  role:a-user-defined-role=vals.roles.includes('special')
  # If you need to debug what is in this or vals you can use console.log
  # wiseUser=console.log(this, vals),true
  # Checks a comma separated x-roles header for the string arkime_wise_admin
  wiseAdmin=vals['x-roles'] && vals['x-roles'].split(',').map(s => s.trim()).includes('arkime_wise_admin')
  </code></pre>

settings:
  - key: "[role]="
    text: A javascript expression using this for user fields and vals for request headers or oidc info.
