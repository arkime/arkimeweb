name: Debugging & Logging

before: |
  <p>
    There are two methods for enabling debugging to Arkime applications, either the command line <code>--debug</code> option or a setting <code>debug=N</code> in the configuration file.
    If any command line options are present, then the configuration file is ignored.
    To increase the debug level on the command line use multiple options, so for example <code>--debug --debug</code> will set the debug level to 2, so will <code>debug=2</code> in the configuration file.
  </p>
  <p>
    These settings should live in the <code>[cont3xt]</code>, <code>[parliament]</code>, <code>[wiseService]</code> or <code>[default]</code> sections depending on the Arkime application.
  </p>

settings:
  - key: debug
    value: 0
    text: The debug level to use if NO --debug options are given. The higher the number, the more information is logged.

  - key: accessLogFile
    value: EMPTY
    text: |
      If left empty, then the various node applications will log to stdout. It can be set to a filename and then logging will
      be directed there. The capture application doesn't support this setting.

  - key: accessLogFormat
    value: |
      :date :username %1b[1m:method%1b[0m %1b[33m:url%1b[0m :status :res[content-length] bytes :response-time ms
    text: |
      Set the log record format -- this uses Express Morgan. The string is URL Encoded and so uses %xx
      to escape special characters.
      See the Morgan documentation for the <a href="https://github.com/expressjs/morgan">list of keywords</a>.

  - key: accessLogSuppressPaths
    value: EMPTY
    text: |
      This is a semi-colon seperated list of URL paths which should <em>not</em> be logged.
      Setting this to /eshealth.json will suppress logging of all calls to that endpoint.

after: |
  <p>
    The capture application has additional settings for logging, see the <a href="#capture-debug">Capture Debug</a> section.
  </p>
